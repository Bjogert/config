# ================================
# 🐔 ENHANCED CHICKEN MONITORING AUTOMATIONS
# ================================
# Complete real-time tracking with new chicken changes

# Real-time chicken change logging
- id: log_chicken_changes
  alias: "🔄 Log Chicken Changes"
  description: 'Logs when chickens swap places during sessions'
  triggers:
  - entity_id: sensor.chicken_changes
    trigger: state
  conditions:
  - condition: template
    value_template: "{{ trigger.to_state.state != 'No changes' and trigger.to_state.state != 'unknown' }}"
  actions:
  - action: input_number.increment
    target:
      entity_id: input_number.daily_chicken_visits
  - action: input_text.set_value
    target:
      entity_id: input_text.current_nest_occupant
    data:
      value: "{{ state_attr('sensor.chicken_changes', 'new_chicken') }}"
  - action: notify.mobile_app_telefonen
    data:
      message: >
        🔄 Chicken Change! {{ state_attr('sensor.chicken_changes', 'previous_chicken') }} 
        ({{ state_attr('sensor.chicken_changes', 'previous_duration') }}s) → 
        {{ state_attr('sensor.chicken_changes', 'new_chicken') }}
      title: "🐔 Live Activity"
  mode: single

# Track nest occupancy updates
- id: update_nest_occupant_from_mqtt
  alias: "🐔 Update Current Nest Occupant from MQTT"
  description: 'Updates helper when ESP32 publishes new occupant'
  triggers:
  - entity_id: sensor.nest_1_occupant
    trigger: state
  conditions:
  - condition: template
    value_template: "{{ trigger.to_state.state not in ['unknown', 'unavailable', ''] }}"
  actions:
  - action: input_text.set_value
    target:
      entity_id: input_text.current_nest_occupant
    data:
      value: "{{ trigger.to_state.state }}"
  mode: single

# Complete visit tracking from MQTT
- id: track_complete_chicken_visits
  alias: "🐔 Track Complete Chicken Visits from MQTT"
  description: 'Updates counters when ESP32 publishes visit data'
  triggers:
  - entity_id: sensor.chicken_visits_log
    trigger: state
  conditions:
  - condition: template
    value_template: "{{ trigger.to_state.state != 'No visits' and trigger.to_state.state != 'unknown' }}"
  actions:
  - action: input_number.increment
    target:
      entity_id: input_number.daily_chicken_visits
  - action: input_number.increment
    target:
      entity_id: input_number.weekly_chicken_visits
  - data:
      message: >
        🐔 Visit Complete! {{ trigger.to_state.state }} spent 
        {{ state_attr('sensor.chicken_visits_log', 'duration') }}s in the nest. 
        Total visits today: {{ states('input_number.daily_chicken_visits') | int + 1 }}
      title: "🥚 Nest Activity"
    action: notify.mobile_app_telefonen
  mode: single

# Multi-chicken detection alert
- id: multi_chicken_alert
  alias: "👥 Multi-Chicken Detection Alert"
  description: 'Alerts when multiple chickens are cuddling'
  triggers:
  - entity_id: sensor.nest_1_status
    to: 'multiple'
    trigger: state
  actions:
  - action: notify.mobile_app_telefonen
    data:
      message: "👥 Multiple chickens detected in the nest! Cuddling session in progress 🤗"
      title: "🐔 Social Activity"
  - action: input_text.set_value
    target:
      entity_id: input_text.current_nest_occupant
    data:
      value: "Multiple Chickens"
  mode: single

# Daily leaderboard update
- id: update_daily_champion
  alias: "🏆 Update Daily Champion"
  description: 'Updates daily champion based on leaderboard data'
  triggers:
  - entity_id: sensor.chicken_leaderboard
    trigger: state
  conditions:
  - condition: template
    value_template: "{{ state_attr('sensor.chicken_leaderboard', 'leaderboard') is not none }}"
  actions:
  - action: input_text.set_value
    target:
      entity_id: input_text.daily_chicken_champion
    data:
      value: >
        {% set leaderboard = state_attr('sensor.chicken_leaderboard', 'leaderboard') %}
        {% if leaderboard and leaderboard|length > 0 %}
          {{ leaderboard[0].name }}
        {% else %}
          No activity
        {% endif %}
  mode: single

# System status monitoring
- id: chicken_system_status_monitor
  alias: "📡 Chicken System Status Monitor"
  description: 'Monitors ESP32 system health'
  triggers:
  - entity_id: sensor.chicken_system_status
    trigger: state
  actions:
  - choose:
    - conditions:
      - condition: state
        entity_id: sensor.chicken_system_status
        state: 'offline'
      sequence:
      - action: notify.mobile_app_telefonen
        data:
          message: "⚠️ Chicken RFID system went OFFLINE! Check ESP32 connection."
          title: "🚨 System Alert"
    - conditions:
      - condition: state
        entity_id: sensor.chicken_system_status
        state: 'online'
      sequence:
      - action: notify.mobile_app_telefonen
        data:
          message: "✅ Chicken RFID system is back ONLINE!"
          title: "🐔 System Restored"
  mode: single

# Enhanced daily champion announcement
- id: announce_enhanced_daily_champion
  alias: "🏆 Enhanced Daily Champion Announcement"
  description: 'Advanced daily report with complete statistics'
  triggers:
  - at: '18:00:00'
    trigger: time
  conditions:
  - condition: numeric_state
    entity_id: input_number.daily_chicken_visits
    above: 0
  actions:
  - action: notify.mobile_app_telefonen
    data:
      message: >
        🏆 DAILY CHICKEN REPORT 🐔
        
        Champion: {{ states('input_text.daily_chicken_champion') }}
        Total Visits: {{ states('input_number.daily_chicken_visits') }}
        Current Occupant: {{ states('input_text.current_nest_occupant') }}
        
        {% set leaderboard = state_attr('sensor.chicken_leaderboard', 'leaderboard') %}
        {% if leaderboard and leaderboard|length >= 3 %}
        Top 3 Today:
        🥇 {{ leaderboard[0].name }} ({{ leaderboard[0].visits }} visits)
        🥈 {{ leaderboard[1].name }} ({{ leaderboard[1].visits }} visits) 
        🥉 {{ leaderboard[2].name }} ({{ leaderboard[2].visits }} visits)
        {% endif %}
      title: "🐔 Daily Hönsgården Report"
  mode: single
